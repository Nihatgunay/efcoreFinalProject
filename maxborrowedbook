public async Task<(Book, int)> GetMostBorrowedBookAsync()
{
    var loanItems = await _loanRepository.GetAll()
                                         .Include(l => l.LoanItems)
                                         .ThenInclude(li => li.Book)
                                         .SelectMany(l => l.LoanItems)
                                         .ToListAsync();

    var bookCounts = new Dictionary<Book, int>();

    foreach (var loanItem in loanItems)
    {
        if (bookCounts.ContainsKey(loanItem.Book))
        {
            bookCounts[loanItem.Book]++;
        }
        else
        {
            bookCounts[loanItem.Book] = 1;
        }
    }

    var mostBorrowedBook = bookCounts.OrderByDescending(bc => bc.Value).FirstOrDefault();

    return mostBorrowedBook.Key != null ? (mostBorrowedBook.Key, mostBorrowedBook.Value) : (null, 0);
}
